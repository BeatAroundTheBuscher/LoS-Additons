
extended:
  tags:
    RuleItem:
      ITEM_IS_PERSONAL_SHIELD: int
    RuleArmor:
      ARMOR_ALWAYS_EXPLODES: int
    BattleItem:
      PERSONAL_SHIELD_IS_ACTIVATED: int 
    BattleUnit:
      WILL_EXPLODE_NOW: int

  scripts:
    hitUnit:
      - offset: 10
        code: | 
          var int tmp;

          var int numInventoryItems;
          var ptre BattleItem personalShieldItem;
          var int isPersonalShield;
          var int isPersonalShieldActivated;

          var ptr RuleUnit testUnit;


          # debug_log "damaging_type" damaging_type;

          unit.getInventoryItem.size numInventoryItems; # find personal shield
          loop var i numInventoryItems;
            unit.getInventoryItem personalShieldItem i;
            personalShieldItem.getTag isPersonalShield Tag.ITEM_IS_PERSONAL_SHIELD;
            personalShieldItem.getTag isPersonalShieldActivated Tag.PERSONAL_SHIELD_IS_ACTIVATED;

            if and eq isPersonalShield 1 eq isPersonalShieldActivated 1;
              if eq damaging_type 4; # 4 = DT_LASER
                battle_game.randomRange tmp 0 2;
                # debug_log "randomRange rolled" tmp;

                set tmp 0; # 1 and 2 don't work as they don't trigger damageSpecialUnit

                if eq tmp 0; # target explodes
                  battle_game.flashLongMessage "Las hit Shield! Target explodes!";
                  unit.setTag Tag.WILL_EXPLODE_NOW 1;
                  set power 9999; # should always be able to kill
                else eq tmp 1; # shooter explodes
                  battle_game.flashLongMessage "Las hit Shield! Attacker explodes!";
                  set power 0;
                  attacker.setTag Tag.WILL_EXPLODE_NOW 1;
                  attacker.setHealth 0;

                  # different attempts to trigger damageSpecialUnit
                  # attacker.setStun 999;
                  # rules.getRuleUnit testUnit "STR_BAT";
                  # attacker.setHealth 0;
                  # attacker.setSpawnUnit testUnit;
                  # attacker.setSpawnUnitInstantRespawn 1;
                  # attacker.setHealth 0;

                else eq tmp 2; # both explode
                  battle_game.flashLongMessage "Las hit Shield! Target and Attacker explode!";
                  unit.setTag Tag.WILL_EXPLODE_NOW 1;
                  set power 9999; # should always be able to kill
                  attacker.setTag Tag.WILL_EXPLODE_NOW 1;
                  attacker.setHealth 0;
                else;
                  debug_log "Las hit Shield! INVALID STATE!!!";
                  battle_game.flashLongMessage "Las hit Shield! INVALID STATE!!!";
                end;

              else and neq damaging_type 6 neq damaging_type 7; # 6 = DT_STUN # LoS calls this 'SHOCK' # 7 = DT_MELEE # LoS calls this 'BLADES'
                battle_game.flashMessage "Shield absorbed Damage!";
                set power 0;
              end;
            end;
          end;

          return power part side;

    # damageUnit:
    #   - offset: 10
    #     code: |
    #       debug_log "damageUnit"; 
    #       debug_log "unit" unit;
    #       return;

    damageSpecialUnit: 
      - offset: 10
        code: |
          var int tmp;
          var int health;
          var int willExplode;
          var ptr RuleArmor victimArmor;

          var int numInventoryItems;
          var ptre BattleItem personalShieldItem;
          var int isPersonalShield;


          # debug_log "damageSpecialUnit"; 
          # debug_log "unit" unit;

          unit.getRuleArmor victimArmor; # if tank that always explodes
          victimArmor.getTag tmp Tag.ARMOR_ALWAYS_EXPLODES; # does not allow shields

          set willExplode tmp; # or explodes due to Las -> Shield interaction
          unit.getTag tmp Tag.WILL_EXPLODE_NOW;

          add willExplode tmp;
          unit.getHealth health;



          if and gt willExplode 0 le health 0;
            set self_destruct_chance 100;
            # debug_log "self_destruct_chance" self_destruct_chance;
          else;
            set self_destruct_chance 0;
            # debug_log "self_destruct_chance" self_destruct_chance;
          end;

          return;
