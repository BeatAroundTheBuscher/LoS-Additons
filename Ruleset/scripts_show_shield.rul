## adapted from 40k mod

extended:
  tags:
    RuleItem:
      ITEM_IS_PERSONAL_SHIELD: int
    BattleUnit:
#*** Tags for handling recoloring of units ***
      UNIT_RECOLOR_DESYNC: int
      UNIT_RECOLOR_COLOR: int
      UNIT_RECOLOR_BRIGHTNESS: int
      UNIT_RECOLOR_START_FRAME: int
      UNIT_RECOLOR_FRAME_LENGTH: int
      UNIT_HAS_PERSONAL_SHIELD_WORKING: int
      
  scripts:
    newTurnUnit:
      - offset: 10
        code: |
          var int isPersonalShield;
          var int numInventoryItems;
          var ptre BattleItem personalShieldItem;

          unit.setTag Tag.UNIT_HAS_PERSONAL_SHIELD_WORKING 0; # for visualization only
          # there is no ptr for getInventoryItem(.size)
          # it probably doesn't exist so we don't iterate through the entire inventory in every cycle

          unit.getInventoryItem.size numInventoryItems; # find personal shield
          loop var i numInventoryItems;
            unit.getInventoryItem personalShieldItem i;
            personalShieldItem.getTag isPersonalShield Tag.ITEM_IS_PERSONAL_SHIELD;
            if eq isPersonalShield 1;
              unit.setTag Tag.UNIT_HAS_PERSONAL_SHIELD_WORKING 1;
            end;
          end;

          return;

    recolorUnitSprite:
      #*** Handles periodic recolors due to buffs/debuffs on units ***
      - offset: 10
        code: |
          var int frame;
          var int frameLength;
          var int recolorPeriod;
          var int desync;
          var int color;
          var int newShade;
          var int temp;

          var int unitHasShield;

          unit.getTag unitHasShield Tag.UNIT_HAS_PERSONAL_SHIELD_WORKING;

          

          # Check to make sure this unit isn't set to be recolored by a hit first
          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;

          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              return new_pixel;

            end;

          end;

          set recolorPeriod 32;
          set frameLength 4;

          unit.getTag desync Tag.UNIT_RECOLOR_DESYNC;
          set frame anim_frame;
          add frame desync;
          mod frame recolorPeriod;

          # First, a silver flash if the unit has an energy shield


          set color COLOR_X1_SILVER;
          if and neq unitHasShield 0 lt frame frameLength;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

            return new_pixel;

          end;

          return new_pixel;

      #*** Handles recolors due to hitting a unit ***
      - offset: 11
        code: |
          var int frame;
          var int frameLength;
          var int color;
          var int newShade;
          var int temp;

          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;

          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              # Check shade, add some darkening decay, but don't recolor if it'd go too dark
              get_shade newShade new_pixel;
              mul temp 4; # a parameter that creates a nice flash animation
              sub newShade temp;

              if or lt newShade 4 gt newShade 15;

                return new_pixel;

              end;

              # Add some brightness if the tag is set
              unit.getTag temp Tag.UNIT_RECOLOR_BRIGHTNESS;
              sub newShade temp;
              limit_lower newShade 1;

              unit.getTag color Tag.UNIT_RECOLOR_COLOR;
              set_color new_pixel color;
              set_shade new_pixel newShade;

            end;

          end;

          return new_pixel;